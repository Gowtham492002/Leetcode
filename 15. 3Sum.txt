15. 3Sum:

CODE:

nums.sort()
        res = []
        for i in range(0,len(nums)-2):
            if i>0 and nums[i]==nums[i-1]:
                continue
            a = nums[i]
            l = i+1
            r = len(nums)-1
            while l<r:
                s = a+nums[l]+nums[r]
                if s ==0:
                    res.append([a,nums[l],nums[r]])
                    while l < r and nums[l] == nums[l + 1]:
                        l+=1
                    while l < r and nums[r] == nums[r - 1]:
                        r-=1
                    l+=1
                    r-=1
                elif s<0:
                    l+=1
                    

                elif s>0:
                    r-=1
                
        return res

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.

Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.